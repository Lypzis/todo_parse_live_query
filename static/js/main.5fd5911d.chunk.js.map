{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","createSubscription","a","query","Parse","subscribe","subscription","ascending","limit","find","result","messages","Set","on","getNewTodoList","console","log","object","add","forEach","message","id","delete","onChangeHandler","event","target","value","trim","setState","todo","onClickHandler","state","extend","set","save","document","querySelector","newTodosList","todosList","updateTodo","e","checked","deleteChecked","get","destroy","deleteAll","displayTodosList","map","key","htmlFor","type","name","onChange","defaultChecked","this","className","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5fd5911d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport * as Parse from 'parse';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      todo: null,\n      todosList: []\n    }\n\n    Parse.serverURL = \"https://todotutorial.back4app.io\";\n    Parse.initialize('j3dBLz81KYQPLUKsmuP0ahny8d1vsPjLpw0fUtxR', 'kIBgtNiI0637TDIwxlReLrq5yHSTyw95hJmvCGnz');\n\n    this.createSubscription();\n  }\n\n  componentDidMount() {\n    //this.getNewTodoList();\n  }\n\n  createSubscription = async () => {\n    this.query = new Parse.Query('message');\n\n    try {\n      let subscription = await this.query.subscribe();\n      let result = await this.query.ascending('createdAt').limit(25).find();\n      this.messages = new Set(result);\n\n\n      // this event is triggered if successfully connected\n      subscription.on('open', () => {\n        this.getNewTodoList();\n        console.log('subscription opened :D');\n      });\n\n      subscription.on('create', object => {\n        this.messages.add(object);\n        this.getNewTodoList();\n        console.log('Object created :D');\n      });\n\n      subscription.on('delete', object => {\n        this.messages.forEach(message => {\n          if (message.id === object.id)\n            this.messages.delete(message);\n        });\n        this.getNewTodoList();\n        console.log('Object destroyed D:');\n      });\n\n      subscription.on('update', object => {\n        this.getNewTodoList();\n        console.log('Object updated :D');\n      });\n\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  onChangeHandler = event => {\n\n    if (event.target.value.trim() !== '')\n      this.setState({\n        todo: event.target.value\n      });\n  }\n\n  onClickHandler = () => {\n    if (this.state.todo) {\n      let Message = Parse.Object.extend('message');\n      const message = new Message();\n\n      message.set('name', this.state.todo);\n      message.set('completed', false);\n      message.save();\n\n      const input = document.querySelector('input');\n      input.value = '';\n    }\n  }\n\n  getNewTodoList = async () => {\n    const newTodosList = [\n      ...this.messages\n    ];\n\n    this.setState({\n      todosList: newTodosList\n    });\n  }\n\n  updateTodo = event => {\n    const test = [...this.state.todosList];\n\n    test.forEach(e => {\n      if(e.id === event.target.id) {\n        e.set('completed', event.target.checked);\n        e.save();\n      }\n    });\n  }\n\n  deleteChecked = () => {\n    const test = [...this.state.todosList];\n\n    test.forEach(e => {\n      if(e.get('completed')) {\n        e.destroy();\n      }\n    });\n  }\n\n  deleteAll = () => {\n    const test = [...this.state.todosList];\n\n    test.forEach(e => {\n      e.destroy();\n    });\n  }\n\n  displayTodosList = () => {\n    return this.state.todosList.map(message => {\n      return (\n        <li key={message.id}>\n          <label htmlFor={message.id}>{message.get('name')}</label>\n          <input\n            type=\"checkbox\"\n            name={message.get('name')}\n            id={message.id}\n            onChange={this.updateTodo} \n            defaultChecked={message.get('completed')}/>\n        </li>\n      );\n    });\n  }\n\n  render() {\n    const todosList = this.displayTodosList();\n\n    return (\n      <div className=\"App\">\n        <input type=\"text\" onChange={this.onChangeHandler} />\n        <button onClick={this.onClickHandler}>ADD</button>\n\n        <ol>\n          {todosList}\n        </ol>\n\n        <button onClick={this.deleteAll}>DELETE ALL</button>\n        <button onClick={this.deleteChecked}>DELETE COMPLETED</button>\n\n        {/*Make this looks more close like the example*/}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}